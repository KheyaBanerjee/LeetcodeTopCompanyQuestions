# Dictionary	
class Solution:
    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:
        max_len, start_idx = 0, 0
        char_dict = {}
        for i, char in enumerate(s):
            char_dict[char] = i
            if len(char_dict) > k:
                start_idx = min(char_dict.values())
                char_dict.pop(s[start_idx])
                start_idx += 1
            curr_len = i - start_idx + 1
            max_len = max(max_len, curr_len)
        return max_len


# Sliding window	
class Solution:
    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:
        max_len, start_idx = 0, 0
        char_dict = {}
        for i, char in enumerate(s):
            if char not in char_dict:
                char_dict[char] = 1
            else:
                char_dict[char] += 1
            if len(char_dict) > k:
                char_dict[s[start_idx]] -= 1
                if char_dict[s[start_idx]] == 0:
                    char_dict.pop(s[start_idx])
                start_idx += 1
            curr_len = i - start_idx + 1
            max_len = max(max_len, curr_len)
        return max_len
