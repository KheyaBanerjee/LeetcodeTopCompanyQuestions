# DP	
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        dp = [1]*len(nums)
        for i in range(len(nums)):
            for j in range(i):
                if nums[j] < nums[i] and dp[i] < dp[j] + 1:
                    dp[i] = dp[j] + 1
        return max(dp)



# Greedy + Binary search	
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int: 
        subseq = []
        for i in range(len(nums)):
            if not subseq or nums[i] > subseq[-1]:
                subseq.append(nums[i])
            else:
                idx = bisect_left(subseq, nums[i])                
                subseq[idx] = nums[i]
        return len(subseq)
