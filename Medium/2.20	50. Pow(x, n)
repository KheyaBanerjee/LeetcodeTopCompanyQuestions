# Brute force, time limit exceeds DO NOT USE	
class Solution:
    def myPow(self, x: float, n: int) -> float:
        if n < 0:
            sign = -1
        else:
            sign = 1
        res = 1
        for _ in range(abs(n)):
            res *= x
        if sign == 1:
            return res
        else:
            return 1/res

# Iterative	
class Solution:
    def myPow(self, x: float, n: int) -> float:
        '''
        The basic idea is to decompose the exponent into powers of 2, so that you can keep dividing the problem in half. For example, lets say N = 9 = 2^3 + 2^0 = 1001 in binary. Then: x^9 = x^(2^3) * x^(2^0)
We can see that every time we encounter a 1 in the binary representation of N, we need to multiply the answer with x^(2^i) where i is the ith bit of the exponent. Thus, we can keep a running total of repeatedly squaring x - (x, x^2, x^4, x^8, etc) and multiply it by the answer when we see a 1.
        '''
        res = 1
        absn = abs(n)
        while absn > 0:
            if absn % 2 != 0:
                res *= x
            x = x*x
            absn = absn // 2        
        if n < 0:
            return 1/res
        else:
            return res

# Recursive	
class Solution:
    def myPow(self, x: float, n: int) -> float:
        # if n odd: x*(x^2)^(n-1)/2  if n even: (x^2)^n/2
        if n == 0:
            return 1
        if n < 0:
            return 1/self.myPow(x, abs(n))
        if n % 2 == 0:
            return self.myPow(x*x, n//2)
        else:
            return x*self.myPow(x*x, (n-1)//2)

