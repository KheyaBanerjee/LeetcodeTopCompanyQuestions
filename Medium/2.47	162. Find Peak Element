# Brute force, NOT O(logn)	
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return 0
        for i in range(len(nums)):            
            if (i == 0 and nums[i+1] < nums[i]) or (i == len(nums)-1 and nums[i-1] < nums[i]):
                return i
            elif nums[i] > nums[i-1] and nums[i] > nums[i+1]:
                return i


# Binary search, O(logn)	
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        n = len(nums)
        if n == 1:
            return 0
        if nums[0] > nums[1]:
            return 0
        elif nums[-1] > nums[n-2]:
            return n-1
        start, end = 1, n-1
        while start <= end:
            mid = (start + end) // 2
            if nums[mid] > nums[mid-1] and nums[mid] > nums[mid+1]:
                return mid
            elif nums[mid] < nums[mid-1]:
                end = mid - 1
            elif nums[mid] < nums[mid+1]:
                start = mid + 1
        return -1
