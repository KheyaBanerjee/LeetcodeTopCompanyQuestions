# Keep a copy	
class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        rows, cols = len(board), len(board[0])
        copy_board = [[board[r][c] for c in range(cols)] for r in range(rows)]
        neighbors = [(0,-1), (0,1), (1,0), (-1,0), (-1,-1), (1,1), (-1,1), (1,-1)]
        for row in range(rows):
            for col in range(cols):
                live_neighbors = 0
                for neighbor in neighbors:
                    r = row + neighbor[0]
                    c = col + neighbor[1]
                    if (r >= 0 and r < rows) and (c >= 0 and c < cols) and copy_board[r][c] == 1:
                        live_neighbors += 1
                if copy_board[row][col] == 1 and (live_neighbors < 2 or live_neighbors > 3):
                    board[row][col] = 0
                if copy_board[row][col] == 0 and live_neighbors == 3:
                    board[row][col] = 1



# In-place, using values -1 and 2	
class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        rows, cols = len(board), len(board[0])
        neighbors = [(0,-1), (0,1), (1,0), (-1,0), (-1,-1), (1,1), (-1,1), (1,-1)]
        for row in range(rows):
            for col in range(cols):
                live_neighbors = 0
                for neighbor in neighbors:
                    r = row + neighbor[0]
                    c = col + neighbor[1]
                    if (r >= 0 and r < rows) and (c >= 0 and c < cols) and abs(board[r][c]) == 1:
                        live_neighbors += 1
                if board[row][col] == 1:
                    if live_neighbors < 2 or live_neighbors > 3:
                        board[row][col] = -1
                else: # 0, -1, 2
                    if live_neighbors == 3:
                        board[row][col] = 2
        for row in range(rows):
            for col in range(cols):
                if board[row][col] == -1:
                    board[row][col] = 0
                if board[row][col] == 2:
                    board[row][col] = 1
