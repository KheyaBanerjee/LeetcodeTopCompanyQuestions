# Brute force, TIME LIMIT EXCEEDED	
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [0]*len(nums)
        for i in range(len(nums)):
            curr_prod = 1
            for j in range(len(nums)):
                if i == j:
                    continue
                curr_prod *= nums[j]
            res[i] = curr_prod
        return res


# Divide the whole product by element
# Problem ; divide by 0; divide not allowed



# Prefix and suffix product	
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        prefix = [1]*n
        suffix = [1]*n
        res = [0]*n
        for i in range(1, n):
            prefix[i] = prefix[i-1]*nums[i-1]
        for i in range(n-2, -1, -1):
            suffix[i] = suffix[i+1]*nums[i+1]
        for i in range(n):
            res[i] = prefix[i]*suffix[i]
        return res



# Prefix and suffix, without extra space	
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        res = [1]*n
        curr = 1
        for i in range(n):
            res[i] *= curr
            curr *= nums[i]
        curr = 1
        for i in range(n-1, -1, -1):
            res[i] *= curr
            curr *= nums[i]
        return res
