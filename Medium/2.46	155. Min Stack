# getMin O(n), same as min()	
class MinStack:
    def __init__(self):
        self.stack = []
    def push(self, val: int) -> None:
        self.stack.append(val)      
    def pop(self) -> None:
        self.stack.pop()
    def top(self) -> int:
        return self.stack[-1]
    def getMin(self) -> int:
        if len(self.stack) == 1:
            return self.stack[0]
        minstack = float('inf')
        for s in self.stack:
            minstack = min(minstack, s)
        return minstack


# Using 2 stacks or tuple	
class MinStack:
    def __init__(self):
        self.stack = []
    def push(self, val: int) -> None:
        curr_min = self.getMin()
        if curr_min == None or val <= curr_min:
            curr_min = val
        self.stack.append((val, curr_min))      
    def pop(self) -> None:
        self.stack.pop()
    def top(self) -> int:
        return self.stack[-1][0]
    def getMin(self) -> int:
        if len(self.stack) == 0:
            return None
        return self.stack[-1][1]
