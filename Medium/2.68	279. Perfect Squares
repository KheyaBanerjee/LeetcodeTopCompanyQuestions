# DP, copied	
class Solution:
    def numSquares(self, n: int) -> int:
        # 
        if n <= 0:
            return 0
        dp = [float('inf')]*(n+1)
        dp[0] = 0
        for i in range(1,n+1):
            j = 1
            while j*j <= i:
                dp[i] = min(dp[i], dp[i - j*j] + 1)
                j += 1
        return dp[-1]



# BFS, copied	
class Solution:
    def numSquares(self, n: int) -> int:
        if n < 2:
            return n
        squares = [i**2 for i in range(1, int(n**0.5)+1)]
        depth, queue = 0, {n}
        while queue:
            depth += 1
            tmp = set()
            for node in queue:
                for square in squares:
                    if node == square: 
                        return depth
                    if node < square: 
                        break
                    tmp.add(node-square)
            queue = tmp
        return depth
