# Backtracking	
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        # 
        res = []
        self.backtracking('', 0, 0, n, res)
        return res

    def backtracking(self, path, leftp, rightp, n, res):
        if len(path) == 2*n:
            res.append(path)
            return 
        if leftp < n:
            self.backtracking(path+'(', leftp+1, rightp, n, res)
        if rightp < leftp: # This is crucial for meanigful parenthesis
            self.backtracking(path+')', leftp, rightp+1, n, res)
