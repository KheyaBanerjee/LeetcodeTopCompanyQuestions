# Fibonnaci series calculation	
class Solution:
    def climbStairs(self, n: int) -> int:
        a = b = 1
        for _ in range(n):
            a, b = b, a + b
        return a

# Lookup table, fibonnaci, recursion- memorization?	
class Solution:
    def climbStairs(self, n: int) -> int:
        memo = {}
        memo[1], memo[2] = 1, 2
        def climb(n):
            if n not in memo:
                memo[n] = climb(n-1) + climb(n-2)
            return memo[n]
        return climb(n)

# Dynamic programming	
class Solution:
    def climbStairs(self, n: int) -> int:
        if n < 3:
            return n
        dp = [0]*(n+1)
        dp[1], dp[2] = 1, 2
        for i in range(3, n+1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[n]
