# Two dictionaries	
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        ds, dt = {}, {}
        for c in s:
            ds[c] = ds.get(c, 0) + 1
        for c in t:
            dt[c] = dt.get(c, 0) + 1
        return ds == dt

# Sorting	
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return sorted(s) == sorted(t)

# One dictionary	
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        dic = {}
        for i in s:
            if i not in dic:
                dic[i] = 1
            else:
                dic[i] += 1
        for i in t:
            if i not in dic:
                return False
            else:
                dic[i] -= 1
        for i in dic:
            if dic[i] != 0:
                return False
        return True

# Using unicode values as index	
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        maps = [0]*26
        for i in s:
            maps[ord(i) - ord('a')] += 1
        for i in t:
            maps[ord(i) - ord('a')] -= 1
        return set(maps) == {0}
