# Iterative BFS        	
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        self.maxdep = 0
        queue = [(root, 0)]
        while queue:
            node, level = queue.pop(0)
            if not node.left and not node.right:
                self.maxdep = max(self.maxdep, level)
            if node.left:
                queue.append((node.left, level+1))
            if node.right:
                queue.append((node.right, level+1))
        return self.maxdep + 1

# DFS Recursive	
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        def DFS(root, level):
            if not root:
                return level
            else:
                return max(DFS(root.left, level+1), DFS(root.right, level+1)) 
        return DFS(root, 0)    
