# Two pointer	
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        # 
        if headA is None or headB is None:
            return None
        ptrA, ptrB = headA, headB
        while ptrA is not ptrB:
            if ptrA is None:
                ptrA = headB
            else:                
                ptrA = ptrA.next
            if ptrB is None:
                ptrB = headA
            else:
                ptrB = ptrB.next
        return ptrA

# Dictionary 	
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        dic = {}
        while headA:
            dic[headA] = 1
            headA = headA.next
        while headB:
            if headB in dic:
                return headB  
            else:
                dic[headB] = 2
            headB = headB.next
